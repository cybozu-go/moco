apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "moco.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "moco.chart" . }}'
  name: '{{ template "moco.fullname" . }}-controller-manager'
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "moco.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "moco.chart" . }}'
  name: '{{ template "moco.fullname" . }}-leader-election-role'
  namespace: '{{ .Release.Namespace }}'
rules:
- apiGroups:
  - ""
  - coordination.k8s.io
  resources:
  - configmaps
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "moco.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "moco.chart" . }}'
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: '{{ template "moco.fullname" . }}-backuppolicy-editor-role'
rules:
- apiGroups:
  - moco.cybozu.com
  resources:
  - backuppolicies
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - moco.cybozu.com
  resources:
  - backuppolicies/status
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "moco.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "moco.chart" . }}'
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: '{{ template "moco.fullname" . }}-backuppolicy-viewer-role'
rules:
- apiGroups:
  - moco.cybozu.com
  resources:
  - backuppolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - moco.cybozu.com
  resources:
  - backuppolicies/status
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "moco.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "moco.chart" . }}'
  name: '{{ template "moco.fullname" . }}-manager-role'
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - secrets/status
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts/status
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - services/status
  verbs:
  - get
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets/status
  verbs:
  - get
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cert-manager.io
  resources:
  - certificates
  verbs:
  - create
  - delete
  - get
  - list
  - watch
- apiGroups:
  - moco.cybozu.com
  resources:
  - backuppolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - moco.cybozu.com
  resources:
  - mysqlclusters
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - moco.cybozu.com
  resources:
  - mysqlclusters/finalizers
  verbs:
  - update
- apiGroups:
  - moco.cybozu.com
  resources:
  - mysqlclusters/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  - roles
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "moco.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "moco.chart" . }}'
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: '{{ template "moco.fullname" . }}-mysqlcluster-editor-role'
rules:
- apiGroups:
  - moco.cybozu.com
  resources:
  - mysqlclusters
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - moco.cybozu.com
  resources:
  - mysqlclusters/status
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "moco.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "moco.chart" . }}'
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: '{{ template "moco.fullname" . }}-mysqlcluster-viewer-role'
rules:
- apiGroups:
  - moco.cybozu.com
  resources:
  - mysqlclusters
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - moco.cybozu.com
  resources:
  - mysqlclusters/status
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "moco.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "moco.chart" . }}'
  name: '{{ template "moco.fullname" . }}-leader-election-rolebinding'
  namespace: '{{ .Release.Namespace }}'
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: '{{ template "moco.fullname" . }}-leader-election-role'
subjects:
- kind: ServiceAccount
  name: '{{ template "moco.fullname" . }}-controller-manager'
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "moco.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "moco.chart" . }}'
  name: '{{ template "moco.fullname" . }}-manager-rolebinding'
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: '{{ template "moco.fullname" . }}-manager-role'
subjects:
- kind: ServiceAccount
  name: '{{ template "moco.fullname" . }}-controller-manager'
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "moco.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "moco.chart" . }}'
  name: '{{ template "moco.fullname" . }}-webhook-service'
  namespace: '{{ .Release.Namespace }}'
spec:
  ports:
  - port: 443
    targetPort: webhook-server
  selector:
    app.kubernetes.io/component: moco-controller
    app.kubernetes.io/name: '{{ include "moco.name" . }}'
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: '{{ .Release.Namespace }}/{{ template "moco.fullname"
      . }}-serving-cert'
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "moco.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "moco.chart" . }}'
  name: '{{ template "moco.fullname" . }}-mutating-webhook-configuration'
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: '{{ template "moco.fullname" . }}-webhook-service'
      namespace: '{{ .Release.Namespace }}'
      path: /mutate-moco-cybozu-com-v1beta1-mysqlcluster
  failurePolicy: Fail
  name: mmysqlcluster.kb.io
  rules:
  - apiGroups:
    - moco.cybozu.com
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    resources:
    - mysqlclusters
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: '{{ .Release.Namespace }}/{{ template "moco.fullname"
      . }}-serving-cert'
  labels:
    app.kubernetes.io/managed-by: '{{ .Release.Service }}'
    app.kubernetes.io/name: '{{ include "moco.name" . }}'
    app.kubernetes.io/version: '{{ .Chart.AppVersion }}'
    helm.sh/chart: '{{ include "moco.chart" . }}'
  name: '{{ template "moco.fullname" . }}-validating-webhook-configuration'
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: '{{ template "moco.fullname" . }}-webhook-service'
      namespace: '{{ .Release.Namespace }}'
      path: /validate-moco-cybozu-com-v1beta1-backuppolicy
  failurePolicy: Fail
  name: vbackuppolicy.kb.io
  rules:
  - apiGroups:
    - moco.cybozu.com
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    - DELETE
    resources:
    - backuppolicies
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: '{{ template "moco.fullname" . }}-webhook-service'
      namespace: '{{ .Release.Namespace }}'
      path: /validate-moco-cybozu-com-v1beta1-mysqlcluster
  failurePolicy: Fail
  name: vmysqlcluster.kb.io
  rules:
  - apiGroups:
    - moco.cybozu.com
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    resources:
    - mysqlclusters
  sideEffects: None
